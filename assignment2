//installing all the packings

const express = require("express");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const path = require("path");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");

//opening connection with db and stating the server by giving the prot number and middle ware function to handle the json objects it is the builtin middleware
//function in express server to handle json object and it invoke the succeeding function handler or any middleware

let DBpath = path.join(__dirname, "twitterClone.db"); //creating the path of database it open the connection with this database
let app = express();
app.use(express.json()); //middleware function to handle the json object it will parse and call the next function
let db = null; //when we open the connection with db it wil return the promise object to store the we inistiaize the db with null

let initialize = async () => {
  //we are keeping this code try and catch to handle exception they may raise the exceptions
  try {
    db = await open({
      filename: DBpath,
      driver: sqlite3.Database,
    }); //this will return the promise object so it is asyncrinys operation

    app.listen(3000, () => {
      console.log("server is started...");
    });
  } catch (err) {
    console.log(err.message);
    process.exit(1);
  }
};
initialize();

//middleware function to check authorization

let Authorization = (request, response, next) => {
  let authorization = request.headers["authorization"];
  jwt.verify(authorization, "SECRETE_KEY", (error, user) => {
    //console.log(error);
    if (error) {
      response.status(401);
      response.send("Invalid JWT Token");
    } else {
      request.username = user.username;
      //console.log(request);
      next();
    }
  });
};

//api  for registration

app.post("/register", async (request, response) => {
  try {
    let { username, password, name, gender } = request.body;
    let checkingQuery = `select 
    * from user 
    WHERE username = '${username}'`;
    let prom = await db.get(checkingQuery);
    if (prom === undefined) {
      if (password.length >= 6) {
        let pass = await bcrypt.hash(password, 10);
        console.log(pass);
        let query = `INSERT INTO user 
        (username, password, name, gender)
        VALUES ('${username}', '${pass}', '${name}', '${gender}');`;
        let prom = await db.run(query);
        response.send("User created successfully");
      } else {
        response.status(400);
        response.send("Password is too short");
      }
    } else {
      response.status(400);
      response.send("User already exists");
    }
  } catch (err) {
    console.log(err.message);
  }
});

//api for login

app.post("/login/", async (request, response) => {
  try {
    let { username, password } = request.body;
    let queryCheck = `select * 
        from user 
        where username = '${username}';`;
    let prom = await db.get(queryCheck);
    if (prom !== undefined) {
      let idValid = await bcrypt.compare(password, prom.password);
      if (idValid) {
        let token = await jwt.sign({ username: username }, "SECRETE_KEY");
        response.send({ jwtToken: token });
      } else {
        response.status(400);
        response.send("Invalid password");
      }
    } else {
      response.status(400);
      response.send("Invalid user");
    }
  } catch (err) {
    console.log(err.message);
  }
});

//api to get tweets of users who followed by specific user

app.get("/user/tweets/feed/", Authorization, async (request, response) => {
  try {
    let { username } = request;
    //console.log(username);
    let query = ` 
    SELECT user.username as username, 
    tweet.tweet as tweet,
    tweet.date_time as dateTime
    FROM user INNER JOIN tweet ON user.user_id = tweet.user_id
    WHERE user.user_id IN (SELECT follower.following_user_id
        FROM user inner join follower ON user.user_id = follower.follower_user_id
        WHERE user.username = '${username}')
    LIMIT 4
    
    ;`;
    let prom = await db.all(query);
    response.send(prom);
  } catch (err) {
    console.log(err.message);
  }
});

//getting the user following names

app.get("/user/following/", Authorization, async (request, response) => {
  try {
    let { username } = request;
    let query = `select name
        from user
        WHERE user_id IN (select follower.following_user_id
            FROM user INNER JOIN follower ON user.user_id = follower.follower_user_id
             WHERE user.username = '${username}')`;

    let prom = await db.all(query);
    response.send(prom);
  } catch (err) {
    console.log(err.message);
  }
});

//getting the followers

app.get("/user/followers/", Authorization, async (request, response) => {
  try {
    let { username } = request;
    let query = `SELECT 
        name
        FROM user 
        WHERE user_id IN (SELECT 
            follower.follower_user_id
            FROM user INNER JOIN follower ON user.user_id = follower.following_user_id
            WHERE user.username = '${username}')`;
    let prom = await db.all(query);
    response.send(prom);
  } catch (err) {
    console.log(err.message);
  }
});

//getting specific tweet

app.get("/tweets/:tweetId/", Authorization, async (request, response) => {
  try {
    let { username } = request;
    //console.log(username);
    let { tweetId } = request.params;
    let query1 = `SELECT 
         tweet,
         (SELECT 
            count(tweet_id) from like 
            where tweet_id = ${tweetId}) as likes,
         (SELECT 
            count(tweet_id) FROM reply 
            WHERE tweet_id = ${tweetId}) AS replies,
         date_time as dateTime
         FROM tweet 
         WHERE tweet_id = ${tweetId}`;
    let responseObj = await db.all(query1);
    let query2 = ` 
       SELECT tweet_id
        FROM tweet 
        WHERE tweet.user_id IN (SELECT follower.following_user_id
        FROM user inner join follower ON user.user_id = follower.follower_user_id
        WHERE user.username = '${username}');
        `;
    let prom = await db.all(query2);
    console.log(prom);
    let id = prom.find((obj) => {
      //console.log(typeof tweetId);
      return obj.tweet_id === parseInt(tweetId);
    });
    //console.log(id);
    if (id === undefined) {
      response.status(401);
      response.send("Invalid Request");
    } else {
      response.send(responseObj);
    }
  } catch (err) {
    console.log(err.message);
  }
});

app.get("/tweets/:tweetId/likes/", Authorization, async (request, response) => {
  try {
    let { username } = request;
    let { tweetId } = request.params;
    let response_query = `SELECT 
     user.name as name
     FROM tweet INNER JOIN like ON tweet.tweet_id = like.tweet_id INNER JOIN 
     user ON like.user_id = user.user_id 
     WHERE tweet.tweet_id = ${tweetId}`;
    let responseObj = await db.all(response_query);

    let following_Id_query = `SELECT 
     tweet.tweet_id as id
     FROM user INNER JOIN follower ON user.user_id = follower.follower_user_id INNER JOIN tweet 
     ON follower.following_user_id = tweet.user_id
     WHERE user.username = '${username}'`;
    let prom = await db.all(following_Id_query);
    console.log(prom);
    let id = prom.find((obj) => {
      return obj.id === parseInt(tweetId);
    });
    if (id === undefined) {
      response.status(401);
      response.send("Invalid Request");
    } else {
      let ara = responseObj.map((obj) => {
        return obj.name;
      });
      response.send({ likes: ara });
    }
  } catch (err) {
    console.log(err.message);
  }
});

app.get(
  "/tweets/:tweetId/replies/",
  Authorization,
  async (request, response) => {
    try {
      let { username } = request;
      let { tweetId } = request.params;
      let query_response = `SELECT 
       user.name as name,
       reply.reply as reply
       FROM reply INNER JOIN user on reply.user_id = user.user_id 
       where reply.tweet_id = ${tweetId}
       `;

      let responseOBJ = await db.all(query_response);

      let following_ids = `SELECT 
       tweet.tweet_id as id 
       FROM user inner join follower ON user.user_id = follower.follower_user_id INNER JOIN
       tweet ON follower.following_user_id = tweet.user_id 
       WHERE user.username = '${username}'`;
      let prom = await db.all(following_ids);
      let id = prom.find((obj) => {
        return obj.id === parseInt(tweetId);
      });
      if (id === undefined) {
        response.status(401);
        response.send("Invalid Request");
      } else {
        response.send({ replies: responseOBJ });
      }
    } catch (err) {
      console.log(err.message);
    }
  }
);

app.get("/user/tweets/", Authorization, async (request, response) => {
  try {
    let { username } = request;
    let query = `SELECT 
    user_id,
    tweet_id as tweetId
     FROM tweet 
    WHERE user_id = (SELECT 
       user_id 
       FROM user 
       WHERE username = '${username}' )`;
    let prom = await db.all(query);
    console.log(prom);
    let array = [];
    for (let obj of prom) {
      let { tweetId } = obj;
      let query = `SELECT tweet, 
        (SELECT count(user_id)
            FROM like 
            WHERE tweet_id = ${tweetId}) as likes,
         (SELECT count(user_id)
                FROM reply 
                WHERE tweet_id = ${tweetId}) as reply,
            date_time as dateTime 
        FROM tweet 
        WHERE tweet_id = ${tweetId}
            `;
      let prom = await db.get(query);
      array.push(prom);
    }
    response.send(array);
  } catch (err) {
    console.log(err.message);
  }
});

app.post("/user/tweets/", Authorization, async (request, response) => {
  let { username } = request;
  let { tweet } = request.body;
  console.log(tweet);
  console.log(username);
  let query = `SELECT user_id
            FROM user 
            WHERE username = '${username}'`;
  let date = new Date();
  date = `${date.getFullYear()}-${
    date.getMonth() + 1
  }-${date.getDate()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;
  console.log(date);
  //let formatDate = `${date.get}`
  let { user_id } = await db.get(query);
  let query1 = `INSERT INTO tweet 
  (tweet, user_id, date_time)
  Values ('${tweet}', ${user_id}, '${date}')`;
  await db.run(query1);
  response.send("Created a Tweet");
});

app.delete("/tweets/:tweetId/", Authorization, async (request, response) => {
  let { username } = request;
  let { tweetId } = request.params;
  let query1 = `SELECT tweet.tweet_id as tweetId
    FROM user INNER JOIN tweet ON user.user_id = tweet.user_id 
    WHERE username = '${username}'`;
  let arrayObj = await db.all(query1);
  console.log(arrayObj);
  let id = arrayObj.find((obj) => {
    return obj.tweetId === parseInt(tweetId);
  });
  if (id !== undefined) {
    let query = `DELETE FROM tweet 
        WHERE tweet_id = ${tweetId};`;
    await db.run(query);
    response.send("Tweet Removed");
  } else {
    response.status(401);
    response.send("Invalid Request");
  }
});

module.exports = app;
